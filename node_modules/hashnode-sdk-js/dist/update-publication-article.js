"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
/**
 * Update an article in a publication.
 *
 * @param publicationId The publication's id.
 * @param article The article with updated content.
 */
const updatePublicationArticle = (publicationId, article) => __awaiter(void 0, void 0, void 0, function* () {
    return base_1.query(`mutation updateStory($postId: String!, $input: UpdateStoryInput!) {
        updateStory(postId: $postId, input: $input) {
         success,
         message,
         post {
           _id,
           title,
           slug,
           isRepublished,
           publication {
             domain
           }
         },
       }
     }`, {
        postId: article.id,
        input: {
            title: article.title,
            slug: article.slug,
            tags: [],
            contentMarkdown: article.contentMarkdown,
            isPartOfPublication: {
                publicationId: publicationId,
            },
            isRepublished: article.canonicalURL
                ? {
                    originalArticleURL: article.canonicalURL,
                }
                : null,
        },
    }).then(({ data: { updateStory } }) => {
        if (!updateStory.success)
            throw new base_1.APIError([updateStory.message]);
        const { post } = updateStory;
        return {
            id: post._id,
            title: post.title,
            slug: post.slug,
            url: `https://${post.publication.domain}/${post.slug}`,
            canonicalURL: post.isRepublished ? article.canonicalURL : undefined,
            contentMarkdown: article.contentMarkdown,
        };
    });
});
exports.default = updatePublicationArticle;
