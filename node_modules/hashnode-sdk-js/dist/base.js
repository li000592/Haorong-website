"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.query = exports.APIError = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const apiURL = "https://api.hashnode.com";
const apiKey = process.env.HASHNODE_API_KEY;
/**
 * Hashnode API's returned errors.
 */
class APIError extends Error {
    constructor(errors) {
        super(`Hashnode API error: ${JSON.stringify(errors, null, 2)}.`);
        this.errors = errors;
    }
}
exports.APIError = APIError;
/**
 * Generic utility to make a Hashnode API's call.
 *
 * @param gql GraphQL query.
 * @param variables Variables expression.
 */
const query = (gql, variables) => node_fetch_1.default(apiURL, {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        Authorization: apiKey || "",
    },
    body: JSON.stringify({
        query: gql,
        variables,
    }),
})
    // Parse JSON body.
    .then((res) => __awaiter(void 0, void 0, void 0, function* () { return ({ ok: res.ok, json: yield res.json() }); }))
    // Check for API errors.
    .then((res) => {
    if (!res.ok || res.json.errors)
        throw new APIError(res.json.errors);
    return res.json;
});
exports.query = query;
